#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function build() {
  echo ----------------------------------------------------------------------
  echo Building $@...
  echo ----------------------------------------------------------------------
  echo
  pushd $1
    ./configure --prefix=$VENDOR_DIR/$2 ${@:3} > /dev/null 2>&1
    echo "configure finished"
    make
    echo "make finished"
    make install > /dev/null 2>&1
    echo "install finished"
    make clean > /dev/null 2>&1
    echo "clean finished"
  popd > /dev/null
  echo
  echo

  # add to libraries and pkg-config
  export LD_LIBRARY_PATH="$VENDOR_DIR/$2/lib:$LD_LIBRARY_PATH"
  export PKG_CONFIG_PATH="$VENDOR_DIR/$2/lib/pkgconfig:$PKG_CONFIG_PATH"

}

function download() {
  if [ ! -f "$2" ]; then
    echo Downloading $2...
    curl $1 -o $2 -s -S
  else
    echo Got $2...
  fi
}



############# Install GDAL ##############################
#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e # fail fast

# parse params
BUILD_DIR=$1
#BUILD_DIR=/home/vcap/app
VENDOR_DIR="$BUILD_DIR/vendor"
CACHE_DIR=$2
#CACHE_DIR=/tmp
BUILDPACK_DIR=$(cd $(dirname $0)/..; pwd)

function vendor() {
  binary="$1"
  path="$2"
  echo "xxxxxxxxxxxxxxxxxxxxxxxxx"
  echo $1
  echo $2
  echo $BUILDPACK_DIR
  echo "Fetching $binary" | indent
  mkdir -p $path
  curl $binary -s -o - | tar xz -C $path -f -

  [ -d "$path/bin" ] && export PATH=$path/bin:$PATH
  export CPPPATH="$path/include:$CPPPATH"
  export CPATH="$path/include:$CPATH"
  export LIBRARY_PATH="$path/lib:$LIBRARY_PATH"
  export LD_LIBRARY_PATH="$path/lib:$LD_LIBRARY_PATH"
  [ -d "$path/lib/pkgconfig" ] && export PKG_CONFIG_PATH="$path/lib/pkgconfig:$PKG_CONFIG_PATH"

  true
}

echo "-----> Vendoring binaries"
echo $path
echo $PATH
echo $MYPATH
echo "ppppppppppppppppppppppppppppppppppppppppppppppppppppp"
#vendor "https://s3.amazonaws.com/mojodna-heroku/$STACK/gdal-1.11.1-1.tar.gz" "$BUILD_DIR/vendor/gdal"
#vendor "https://s3.amazonaws.com/mojodna-heroku/$STACK/proj-4.8.0-1.tar.gz"  "$BUILD_DIR/vendor/proj"
#vendor "http://forever.codeforamerica.org/heroku-pygeo/gdal-1.11.1-heroku.tar.gz" "$VENDOR_DIR/gdal"
##vendor "http://download.osgeo.org/proj/proj-4.8.0.tar.gz" "$VENDOR_DIR/proj"

#echo "-----> Configuring build environment"

#cat <<EOF > $BUILDPACK_DIR/export
#export PATH="/home/vcap/app/vendor/gdal/vendor/gdal/bin:$VENDOR_DIR/gdal/vendor/gdal/bin:$PATH:\$PATH:"
#export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib:$VENDOR_DIR/gdal/vendor/gdal/lib"
#export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib:$VENDOR_DIR/gdal/vendor/gdal/lib"
#export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH"
#export CPPPATH="\$CPPPATH:$CPPPATH:/home/vcap/app/vendor/gdal/vendor/gdal/include:$VENDOR_DIR/gdal/vendor/gdal/include"
#export CPATH="\$CPATH:$CPATH"
#export GDAL_DATA="$BUILD_DIR/vendor/gdal/share/gdal:/home/vcap/app/vendor/gdal/vendor/gdal/share/gdal"
#EOF

#echo "-----> Building runtime environment"
#mkdir -p $BUILD_DIR/.profile.d

#cat <<EOF > $BUILD_DIR/.profile.d/gdal.sh
#export PATH="/home/vcap/app/vendor/gdal/vendor/gdal/bin:/tmp/staged/vendor/gdal/vendor/gdal/bin:$PATH:\$PATH"
#export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib"
#export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib"
#export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH"
#export CPPPATH="\$CPPPATH:$CPPPATH:/home/vcap/app/vendor/gdal/vendor/gdal/include:$VENDOR_DIR/gdal/vendor/gdal/include"
#export CPATH="\$CPATH:$CPATH"
#export GDAL_DATA="$BUILD_DIR/vendor/gdal/share/gdal:/home/vcap/app/vendor/gdal/vendor/gdal/share/gdal"
#EOF


#export PATH="/home/vcap/app/vendor/gdal/vendor/gdal/bin:$VENDOR_DIR/gdal/vendor/gdal/bin:$PATH:\$PATH:"
#export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib:$VENDOR_DIR/gdal/vendor/gdal/lib"
#export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH:/home/vcap/app/vendor/gdal/vendor/gdal/lib:$VENDOR_DIR/gdal/vendor/gdal/lib"
#export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH"
#export CPPPATH="\$CPPPATH:$CPPPATH:/home/vcap/app/vendor/gdal/vendor/gdal/include:$VENDOR_DIR/gdal/vendor/gdal/include"
#export CPATH="\$CPATH:$CPATH:/home/vcap/app/vendor/gdal/vendor/gdal/include:$VENDOR_DIR/gdal/vendor/gdal/include"
#export GDAL_DATA="$BUILD_DIR/vendor/gdal/share/gdal:/home/vcap/app/vendor/gdal/vendor/gdal/share/gdal"

############## R build pack start #######################
# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR="$2/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
echo $CACHE_DIR
echo $BUILD_DIR
echo $LP_DIR
echo $BUILDPACK_DIR
echo $PATH
echo $LD_LIBRARY_PATH
echo $CPATH
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# config
BUILD_PACK_VERSION="20130729"

GCC_VERSION="4.3"
GLIBC_VERSION="2.7"
R_VERSION="3.1.0"
#R_VERSION="3.0.2"
JAVA_VERSION="1.7.71"

S3_BUCKET="heroku-buildpack-r"
R_BINARIES="https://s3.amazonaws.com/r-buildpack/R-3.1.0-binaries-20140629-2201.tar.gz"
#R_BINARIES="http://yg-build.s3.amazonaws.com/R-heroku-3.0.2-20131105.0015.tar.gz"

##Download Java
#JAVA_BINARIES="http://download.java.net/jdk7u60/archive/b15/binaries/jdk-7u60-ea-bin-b15-linux-i586-16_apr_2014.tar.gz"
JAVA_BINARIES="http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71-linux-x64.tar.gz"



VENDOR_DIR="$BUILD_DIR/vendor"
R_HOME="$VENDOR_DIR/R"
JAVA_HOME="$VENDOR_DIR/jdk1.7.0_71"
CRAN_MIRROR="http://cran.revolutionanalytics.com"

mkdir -p $CACHE_DIR

# vendor R into the slug
echo "Vendoring R $R_VERSION" | indent

# download and unpack binaries
echo "Downloading and unpacking R binaries" | indent

mkdir -p $VENDOR_DIR && mkdir -p /app/vendor
curl $R_BINARIES -s -o r_binaries.tar.gz
tar xzf r_binaries.tar.gz -C $VENDOR_DIR
rm r_binaries.tar.gz

echo "Directory created, R pulled, unpacked" | indent
echo "00000000000000000000000000000000000000000000"
echo `ls -al $VENDOR_DIR/gcc-$GCC_VERSION`
echo "00000000000000000000000000000000000000000000"

##download java
echo "Downloading and unpacking Java binaries" | indent
wget -c -O java_binaries.tar.gz --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" "$JAVA_BINARIES"
tar xzf java_binaries.tar.gz -C $VENDOR_DIR
rm java_binaries.tar.gz

echo "Directory created, Java pulled, unpacked" | indent

# need to copy the binaries to /app/vendor so that R works
cp -R $VENDOR_DIR/gcc-$GCC_VERSION /app/vendor/gcc-$GCC_VERSION
cp -R $VENDOR_DIR/glibc-$GLIBC_VERSION /app/vendor/glibc-$GLIBC_VERSION
#cp -R $VENDOR_DIR/readline /app/vendor/readline
cp -R $VENDOR_DIR/R /app/vendor/R
######added on 12/4/14
cp -R $VENDOR_DIR/gdal /app/vendor/gdal 
cp -R $VENDOR_DIR/proj /app/vendor/proj  
cp -R $VENDOR_DIR/geos /app/vendor/geos 

#copy java
cp -R $VENDOR_DIR/jdk1.7.0_71 /app/vendor/jdk1.7.0_71

echo "11111111111111111111111111111111111111111111"
echo `ls -al $VENDOR_DIR/gcc-$GCC_VERSION`
echo "11111111111111111111111111111111111111111111"

echo "Stuff copied" | indent

# Set Java variables
export JAVA_HOME=/app/vendor/jdk1.7.0_71/jre
export PATH=$JAVA_HOME/bin:$PATH

# R needs to know where gfortran and glibc header files are
export PATH=$PATH:/app/vendor/R/bin:/app/vendor/gcc-$GCC_VERSION/bin
export LDFLAGS="-L/app/vendor/gcc-$GCC_VERSION/lib64/"
export CPPFLAGS="-I/app/vendor/glibc-$GLIBC_VERSION/string/ -I/app/vendor/glibc-$GLIBC_VERSION/time"
export R_HOME=/app/vendor/R
export R_INCLUDE=$R_HOME/lib64/R/include
export LD_LIBRARY_PATH="/lib:/usr/lib:$R_HOME/lib64:$JAVA_HOME/lib/amd64:$JAVA_HOME/lib/amd64/server:$LD_LIBRARY_PATH"
ln -s /usr/lib/libreadline.so $R_HOME/lib64/libreadline.so.5 2>&1

## 12/09/14 C.Ding forced to add env variables from another build pack- hack
export GEOS_LIBRARY_PATH=/app/vendor/geos/lib
export PROJ_LIB=/app/vendor/proj/share/proj
export GDAL_DATA=/app/vendor/gdal/share/gdal
export PATH=$BUILD_DIR/.profile.d:/app/vendor/geos/bin:/app/vendor/gdal/bin:/app/vendor/proj/bin:$PATH
export CPPPATH=$CPPPATH:/app/vendor/geos/include:/app/vendor/gdal/include:/app/vendor/proj/include
export CPATH=$CPATH:/app/vendor/geos/include:/app/vendor/gdal/include:/app/vendor/proj/include
export LIBRARY_PATH=$LIBRARY_PATH:/app/vendor/geos/lib:/app/vendor/gdal/lib:/app/vendor/proj/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/app/vendor/geos/lib:/app/vendor/gdal/lib:/app/vendor/proj/lib

# 12/20/14 C.Ding changed permission 
chmod 777 /app/vendor/proj/share/proj

echo "variables set" | indent

# copy over environment
mkdir -p $BUILD_DIR/.profile.d
cp "$BUILDPACK_DIR/bin/r_environment.sh" $BUILD_DIR/.profile.d/r_environment.sh

echo "environment copied" | indent

# prevent warnings
mkdir -p /app/vendor/R/lib64/R/doc/html
touch /app/vendor/R/lib64/R/doc/html/R.css

# install dependencies from CRAN
echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
R -s <<RPROG
  Sys.setenv(BUILD_DIR="$BUILD_DIR")
  setwd("$BUILD_DIR")
  r <- getOption("repos");
  print(r)
  r["CRAN"] <- "$CRAN_MIRROR";
  options(repos=r);
  `cat $BUILD_DIR/init.r`
RPROG

#cat indent

echo "R $R_VERSION successfully installed" | indent
echo "Java $JAVA_VERSION successfully installed" | indent

# need to copy binaries back so that any installed packages are included in the slug
## 11/16/14 commented the following line to avoid removing other binaries from previous build pack in a multiple-build pack deployment scenario
##mkdir -p /tmp/ding
##cp -R /app/vendor /tmp/ding/vendor
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
echo $PATH
echo $CACHE_DIR
echo $VENDOR_DIR
echo $BUILD_DIR
echo `ls -al $VENDOR_DIR`
echo "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
echo `ls -al /app/vendor/proj/4.8.0/share/proj | sort`
echo "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"
rm -rf $VENDOR_DIR && mkdir -p $VENDOR_DIR
cp -R /app/vendor/gcc-$GCC_VERSION $VENDOR_DIR/gcc-$GCC_VERSION
cp -R /app/vendor/glibc-$GLIBC_VERSION $VENDOR_DIR/glibc-$GLIBC_VERSION
cp -R /app/vendor/R $VENDOR_DIR/R
cp -R /app/vendor/jdk1.7.0_71 $VENDOR_DIR/jdk1.7.0_71
#cp -R /app/vendor $VENDOR_DIR
######added on 12/4/14
cp -R /app/vendor/gdal $VENDOR_DIR/gdal 
cp -R /app/vendor/proj $VENDOR_DIR/proj 
cp -R /app/vendor/geos $VENDOR_DIR/geos 
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
echo $PATH
echo `ls -al $CACHE_DIR`
echo "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# HACK
cp $VENDOR_DIR/gcc-$GCC_VERSION/lib64/* $VENDOR_DIR/R/lib64/R/lib

# remove unneeded files to make slug smaller
##commended out the following on 12/25/14
pushd $VENDOR_DIR/gcc-$GCC_VERSION > /dev/null && rm -rf !(lib64) && popd > /dev/null
pushd $VENDOR_DIR/glibc-$GLIBC_VERSION > /dev/null && rm -rf !(string|time) && popd > /dev/null
